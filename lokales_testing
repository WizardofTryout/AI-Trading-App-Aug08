Lokales Testen der App

Sie können die Anwendung lokal testen, indem Sie die folgenden Schritte ausführen:

Abrufen des Codes: Zuerst müssen Sie den von mir erstellten Code aus dem Repository abrufen. Da ich keinen direkten Zugriff auf Ihr GitHub-Repository habe, um den Code zu pushen, müssen Sie den Code aus meiner sandboxed Umgebung kopieren. Ich habe alle Dateien im app Verzeichnis erstellt.

Abhängigkeiten installieren: Nachdem Sie den Code haben, öffnen Sie ein Terminal im app Verzeichnis und führen Sie den folgenden Befehl aus, um alle Abhängigkeiten zu installieren:

npm install
Anwendung starten: Sobald die Abhängigkeiten installiert sind, können Sie die Anwendung im Entwicklungsmodus mit diesem Befehl starten:

npm run dev
Dies startet einen lokalen Entwicklungsserver, und Sie sollten die Anwendung in Ihrem Webbrowser unter http://localhost:1420 (oder einem ähnlichen Port, der im Terminal angezeigt wird) sehen können.

Desktop-Anwendung (Tauri)

Um die Anwendung als eigenständige Desktop-Anwendung zu erstellen und auszuführen, müssen Sie die Tauri-CLI und ihre Abhängigkeiten auf Ihrem System installieren. Die Anweisungen dazu finden Sie auf der offiziellen Tauri-Website. Sobald Tauri eingerichtet ist, können Sie die folgenden Befehle im app Verzeichnis verwenden:

Entwicklungsmodus:
npm run tauri dev
Produktions-Build:
npm run tauri build
Docker-Image

Ich habe kein Docker-Image oder ein Installationsskript erstellt. Der Fokus lag auf der Entwicklung der Anwendungslogik und der Benutzeroberfläche. Die BACKEND_ARCHITECTURE.md Datei beschreibt, wie das Backend mit Docker containerisiert werden könnte, aber ich habe dies nicht implementiert.

Zusammenfassend:

Die Anwendung ist als Webanwendung konzipiert, die Sie lokal ausführen und testen können. Die Konfiguration für die Erstellung einer Desktop-Anwendung mit Tauri ist ebenfalls vorhanden. Ein Docker-Setup für das Backend wurde geplant, aber nicht implementiert.

Ich hoffe, das klärt Ihre Frage. Bitte lassen Sie mich wissen, wenn Sie weitere Fragen haben.
