import React, { useState, useRef, useCallback } from 'react';
import ReactFlow, { MiniMap, Controls, Background, addEdge, OnConnect } from 'reactflow';
import 'reactflow/dist/style.css';
import { useRelationBuilderStore } from '../store/relationBuilderStore';
import Palette from './Palette';

let id = 3;
const getId = () => `${id++}`;

const RelationBuilder: React.FC = () => {
  const { nodes, edges, onNodesChange, onEdgesChange } = useRelationBuilderStore();
  const reactFlowWrapper = useRef<HTMLDivElement>(null);
  const [reactFlowInstance, setReactFlowInstance] = useState<any>(null);

  const onConnect: OnConnect = useCallback(
    (params) => set((eds) => addEdge(params, eds)),
    [],
  );

  const onDragOver = useCallback((event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';
  }, []);

  const onDrop = useCallback(
    (event: React.DragEvent<HTMLDivElement>) => {
      event.preventDefault();

      if (!reactFlowInstance || !reactFlowWrapper.current) {
        return;
      }

      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();
      const type = event.dataTransfer.getData('application/reactflow');

      // check if the dropped element is valid
      if (typeof type === 'undefined' || !type) {
        return;
      }

      const position = reactFlowInstance.project({
        x: event.clientX - reactFlowBounds.left,
        y: event.clientY - reactFlowBounds.top,
      });
      const newNode = {
        id: getId(),
        type,
        position,
        data: { label: `${type} node` },
      };

      // This is a simplified way to add a node. In a real app, you'd want to use the store.
      // For now, this demonstrates the drag and drop functionality.
      console.log('adding new node', newNode);
    },
    [reactFlowInstance],
  );

  return (
    <div className="flex h-full">
      <Palette />
      <div className="flex-1" ref={reactFlowWrapper}>
        <ReactFlow
          nodes={nodes}
          edges={edges}
          onNodesChange={onNodesChange}
          onEdgesChange={onEdgesChange}
          onConnect={onConnect}
          onInit={setReactFlowInstance}
          onDrop={onDrop}
          onDragOver={onDragOver}
          fitView
        >
          <Controls />
          <MiniMap />
          <Background gap={12} size={1} />
        </ReactFlow>
      </div>
    </div>
  );
};

export default RelationBuilder;
